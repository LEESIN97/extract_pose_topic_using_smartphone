"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),Goal_RequestRefStruct=StructType({_dummy:primitiveTypes.bool}),Goal_RequestRefArray=ArrayType(Goal_RequestRefStruct),Goal_RequestRefStructArray=StructType({data:Goal_RequestRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class Goal_RequestWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?this._refObject=new Goal_RequestRefStruct(e._refObject.toObject()):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new Goal_RequestRefStruct}static createFromRefObject(e){let t=new Goal_RequestWrapper;return t.copyRefObject(e),t}static createArray(){return new Goal_RequestArrayWrapper}static get ArrayType(){return Goal_RequestArrayWrapper}static get refObjectArrayType(){return Goal_RequestRefStructArray}static get refObjectType(){return Goal_RequestRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject._dummy=e._dummy}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){Goal_RequestWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"turtlebot3_msgs",subFolder:"srv",interfaceName:"Goal_Request"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get _dummy(){return this._refObject._dummy}set _dummy(e){this._refObject._dummy=e}copyRefObject(e){this._refObject=new Goal_RequestRefStruct(e.toObject())}copy(e){this._refObject=new Goal_RequestRefStruct(e._refObject.toObject())}static get classType(){return Goal_RequestWrapper}static get ROSMessageDef(){return{constants:[],fields:[],baseType:{pkgName:"turtlebot3_msgs",type:"Goal_Request",stringUpperBound:null,isPrimitiveType:!1},msgName:"Goal_Request"}}hasMember(e){return-1!==["_dummy"].indexOf(e)}}class Goal_RequestArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const t=e.length;this._resize(t),e.forEach((e,t)=>{e instanceof Goal_RequestWrapper?this._wrappers[t].copy(e):this._wrappers[t]=new Goal_RequestWrapper(e)})}freeze(e){this._wrappers.forEach((t,r)=>{t.freeze(e),this._refArray[r]=t.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to Goal_RequestArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to Goal_RequestArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new Goal_RequestRefArray(e),this._refObject=new Goal_RequestRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let t=0;t<e;t++)this._wrappers.push(new Goal_RequestWrapper)}copyRefObject(e){this._refObject=e;let t=this._refObject.data;t.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(t[e])}copy(e){if(!(e instanceof Goal_RequestArrayWrapper))throw new TypeError('Invalid argument: should provide "Goal_RequestArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,t)=>{this._wrappers[t].copy(e)})}static freeArray(e){let t=e.data;t.length=e.size;for(let r=0;r<e.size;r++)Goal_RequestWrapper.freeStruct(t[r])}static get elementType(){return Goal_RequestWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return Goal_RequestArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=Goal_RequestWrapper;