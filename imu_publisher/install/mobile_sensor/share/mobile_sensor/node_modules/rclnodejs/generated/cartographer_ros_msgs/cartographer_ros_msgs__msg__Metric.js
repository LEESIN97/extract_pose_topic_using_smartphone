"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),MetricLabelWrapper=require("../../generated/cartographer_ros_msgs/cartographer_ros_msgs__msg__MetricLabel.js"),HistogramBucketWrapper=require("../../generated/cartographer_ros_msgs/cartographer_ros_msgs__msg__HistogramBucket.js"),MetricRefStruct=StructType({type:primitiveTypes.uint8,labels:MetricLabelWrapper.refObjectArrayType,value:primitiveTypes.float64,counts_by_bucket:HistogramBucketWrapper.refObjectArrayType}),MetricRefArray=ArrayType(MetricRefStruct),MetricRefStructArray=StructType({data:MetricRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class MetricWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new MetricRefStruct(e._refObject.toObject()),this._wrapperFields.labels=MetricLabelWrapper.createArray(),this._wrapperFields.labels.copy(e._wrapperFields.labels),this._wrapperFields.counts_by_bucket=HistogramBucketWrapper.createArray(),this._wrapperFields.counts_by_bucket.copy(e._wrapperFields.counts_by_bucket)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new MetricRefStruct,this._wrapperFields.labels=MetricLabelWrapper.createArray(),this._wrapperFields.counts_by_bucket=HistogramBucketWrapper.createArray()}static createFromRefObject(e){let r=new MetricWrapper;return r.copyRefObject(e),r}static createArray(){return new MetricArrayWrapper}static get ArrayType(){return MetricArrayWrapper}static get refObjectArrayType(){return MetricRefStructArray}static get refObjectType(){return MetricRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.labels.fill([]),this._wrapperFields.labels.freeze(e),this._refObject.labels=this._wrapperFields.labels.refObject,e&&this._wrapperFields.counts_by_bucket.fill([]),this._wrapperFields.counts_by_bucket.freeze(e),this._refObject.counts_by_bucket=this._wrapperFields.counts_by_bucket.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject.type=e.type,this._wrapperFields.labels.copyRefObject(e.labels),this._refObject.value=e.value,this._wrapperFields.counts_by_bucket.copyRefObject(e.counts_by_bucket)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){0!=e.labels.size&&(MetricLabelWrapper.ArrayType.freeArray(e.labels),MetricLabelWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.labels,MetricLabelWrapper.refObjectArrayType,"data")),0!=e.counts_by_bucket.size&&(HistogramBucketWrapper.ArrayType.freeArray(e.counts_by_bucket),HistogramBucketWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.counts_by_bucket,HistogramBucketWrapper.refObjectArrayType,"data"))}static destoryRawROS(e){MetricWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"cartographer_ros_msgs",subFolder:"msg",interfaceName:"Metric"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get type(){return this._refObject.type}set type(e){this._refObject.type=e}get labels(){return this._wrapperFields.labels}set labels(e){this._wrapperFields.labels.fill(e)}get value(){return this._refObject.value}set value(e){this._refObject.value=e}get counts_by_bucket(){return this._wrapperFields.counts_by_bucket}set counts_by_bucket(e){this._wrapperFields.counts_by_bucket.fill(e)}copyRefObject(e){this._refObject=new MetricRefStruct(e.toObject()),this._wrapperFields.labels.copyRefObject(this._refObject.labels),this._wrapperFields.counts_by_bucket.copyRefObject(this._refObject.counts_by_bucket)}copy(e){this._refObject=new MetricRefStruct(e._refObject.toObject()),this._wrapperFields.labels.copy(e._wrapperFields.labels),this._wrapperFields.counts_by_bucket.copy(e._wrapperFields.counts_by_bucket)}static get classType(){return MetricWrapper}static get ROSMessageDef(){return{constants:[{type:"uint8",name:"TYPE_COUNTER",value:0},{type:"uint8",name:"TYPE_GAUGE",value:1},{type:"uint8",name:"TYPE_HISTOGRAM",value:2}],fields:[{name:"type",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint8",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"labels",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"cartographer_ros_msgs",type:"MetricLabel",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"value",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float64",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"counts_by_bucket",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"cartographer_ros_msgs",type:"HistogramBucket",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"cartographer_ros_msgs",type:"Metric",stringUpperBound:null,isPrimitiveType:!1},msgName:"Metric"}}hasMember(e){return-1!==["type","labels","value","counts_by_bucket"].indexOf(e)}}class MetricArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof MetricWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new MetricWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MetricArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MetricArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new MetricRefArray(e),this._refObject=new MetricRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new MetricWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof MetricArrayWrapper))throw new TypeError('Invalid argument: should provide "MetricArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)MetricWrapper.freeStruct(r[t])}static get elementType(){return MetricWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return MetricArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}Object.defineProperty(MetricWrapper,"TYPE_COUNTER",{value:0,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(MetricWrapper,"TYPE_GAUGE",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(MetricWrapper,"TYPE_HISTOGRAM",{value:2,writable:!1,enumerable:!0,configurable:!0}),module.exports=MetricWrapper;