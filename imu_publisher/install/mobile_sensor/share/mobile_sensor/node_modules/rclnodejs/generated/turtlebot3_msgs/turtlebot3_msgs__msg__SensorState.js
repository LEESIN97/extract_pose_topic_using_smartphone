"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),HeaderWrapper=require("../../generated/std_msgs/std_msgs__msg__Header.js"),SensorStateRefStruct=StructType({header:HeaderWrapper.refObjectType,bumper:primitiveTypes.uint8,cliff:primitiveTypes.float32,sonar:primitiveTypes.float32,illumination:primitiveTypes.float32,led:primitiveTypes.uint8,button:primitiveTypes.uint8,torque:primitiveTypes.bool,left_encoder:primitiveTypes.int32,right_encoder:primitiveTypes.int32,battery:primitiveTypes.float32}),SensorStateRefArray=ArrayType(SensorStateRefStruct),SensorStateRefStructArray=StructType({data:SensorStateRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class SensorStateWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new SensorStateRefStruct(e._refObject.toObject()),this._wrapperFields.header=new HeaderWrapper(e._wrapperFields.header)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new SensorStateRefStruct,this._wrapperFields.header=new HeaderWrapper}static createFromRefObject(e){let r=new SensorStateWrapper;return r.copyRefObject(e),r}static createArray(){return new SensorStateArrayWrapper}static get ArrayType(){return SensorStateArrayWrapper}static get refObjectArrayType(){return SensorStateRefStructArray}static get refObjectType(){return SensorStateRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.header.freeze(e),this._refObject.header=this._wrapperFields.header.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.header.copyRefObject(e.header),this._refObject.bumper=e.bumper,this._refObject.cliff=e.cliff,this._refObject.sonar=e.sonar,this._refObject.illumination=e.illumination,this._refObject.led=e.led,this._refObject.button=e.button,this._refObject.torque=e.torque,this._refObject.left_encoder=e.left_encoder,this._refObject.right_encoder=e.right_encoder,this._refObject.battery=e.battery}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){HeaderWrapper.freeStruct(e.header)}static destoryRawROS(e){SensorStateWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"turtlebot3_msgs",subFolder:"msg",interfaceName:"SensorState"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get header(){return this._wrapperFields.header}set header(e){e instanceof HeaderWrapper?this._wrapperFields.header.copy(e):this._wrapperFields.header.copy(new HeaderWrapper(e))}get bumper(){return this._refObject.bumper}set bumper(e){this._refObject.bumper=e}get cliff(){return this._refObject.cliff}set cliff(e){this._refObject.cliff=e}get sonar(){return this._refObject.sonar}set sonar(e){this._refObject.sonar=e}get illumination(){return this._refObject.illumination}set illumination(e){this._refObject.illumination=e}get led(){return this._refObject.led}set led(e){this._refObject.led=e}get button(){return this._refObject.button}set button(e){this._refObject.button=e}get torque(){return this._refObject.torque}set torque(e){this._refObject.torque=e}get left_encoder(){return this._refObject.left_encoder}set left_encoder(e){this._refObject.left_encoder=e}get right_encoder(){return this._refObject.right_encoder}set right_encoder(e){this._refObject.right_encoder=e}get battery(){return this._refObject.battery}set battery(e){this._refObject.battery=e}copyRefObject(e){this._refObject=new SensorStateRefStruct(e.toObject()),this._wrapperFields.header.copyRefObject(this._refObject.header)}copy(e){this._refObject=new SensorStateRefStruct(e._refObject.toObject()),this._wrapperFields.header.copy(e._wrapperFields.header)}static get classType(){return SensorStateWrapper}static get ROSMessageDef(){return{constants:[{type:"uint8",name:"BUMPER_FORWARD",value:1},{type:"uint8",name:"BUMPER_BACKWARD",value:2},{type:"uint8",name:"CLIFF",value:1},{type:"uint8",name:"SONAR",value:1},{type:"uint8",name:"ILLUMINATION",value:1},{type:"uint8",name:"BUTTON0",value:1},{type:"uint8",name:"BUTTON1",value:2},{type:"uint8",name:"ERROR_LEFT_MOTOR",value:1},{type:"uint8",name:"ERROR_RIGHT_MOTOR",value:2},{type:"uint8",name:"TORQUE_ON",value:1},{type:"uint8",name:"TORQUE_OFF",value:2}],fields:[{name:"header",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"std_msgs",type:"Header",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"bumper",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint8",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"cliff",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"sonar",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"illumination",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"led",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint8",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"button",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint8",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"torque",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"bool",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"left_encoder",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"int32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"right_encoder",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"int32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"battery",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"turtlebot3_msgs",type:"SensorState",stringUpperBound:null,isPrimitiveType:!1},msgName:"SensorState"}}hasMember(e){return-1!==["header","bumper","cliff","sonar","illumination","led","button","torque","left_encoder","right_encoder","battery"].indexOf(e)}}class SensorStateArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof SensorStateWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new SensorStateWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SensorStateArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SensorStateArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new SensorStateRefArray(e),this._refObject=new SensorStateRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new SensorStateWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof SensorStateArrayWrapper))throw new TypeError('Invalid argument: should provide "SensorStateArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)SensorStateWrapper.freeStruct(r[t])}static get elementType(){return SensorStateWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return SensorStateArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}Object.defineProperty(SensorStateWrapper,"BUMPER_FORWARD",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"BUMPER_BACKWARD",{value:2,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"CLIFF",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"SONAR",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"ILLUMINATION",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"BUTTON0",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"BUTTON1",{value:2,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"ERROR_LEFT_MOTOR",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"ERROR_RIGHT_MOTOR",{value:2,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"TORQUE_ON",{value:1,writable:!1,enumerable:!0,configurable:!0}),Object.defineProperty(SensorStateWrapper,"TORQUE_OFF",{value:2,writable:!1,enumerable:!0,configurable:!0}),module.exports=SensorStateWrapper;