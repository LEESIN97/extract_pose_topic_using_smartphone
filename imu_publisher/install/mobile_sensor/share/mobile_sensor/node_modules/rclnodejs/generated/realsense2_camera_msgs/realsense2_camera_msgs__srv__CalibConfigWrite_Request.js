"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StringWrapper=require("../../generated/std_msgs/std_msgs__msg__String.js"),CalibConfigWrite_RequestRefStruct=StructType({calib_config:primitiveTypes.string}),CalibConfigWrite_RequestRefArray=ArrayType(CalibConfigWrite_RequestRefStruct),CalibConfigWrite_RequestRefStructArray=StructType({data:CalibConfigWrite_RequestRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class CalibConfigWrite_RequestWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new CalibConfigWrite_RequestRefStruct(e._refObject.toObject()),this._wrapperFields.calib_config=new StringWrapper(e._wrapperFields.calib_config)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new CalibConfigWrite_RequestRefStruct,this._wrapperFields.calib_config=new StringWrapper}static createFromRefObject(e){let r=new CalibConfigWrite_RequestWrapper;return r.copyRefObject(e),r}static createArray(){return new CalibConfigWrite_RequestArrayWrapper}static get ArrayType(){return CalibConfigWrite_RequestArrayWrapper}static get refObjectArrayType(){return CalibConfigWrite_RequestRefStructArray}static get refObjectType(){return CalibConfigWrite_RequestRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.calib_config.freeze(e),this._refObject.calib_config=this._wrapperFields.calib_config.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.calib_config.data=e.calib_config.data}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){StringWrapper.freeStruct(e.calib_config)}static destoryRawROS(e){CalibConfigWrite_RequestWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"realsense2_camera_msgs",subFolder:"srv",interfaceName:"CalibConfigWrite_Request"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get calib_config(){return this._wrapperFields.calib_config.data}set calib_config(e){this._wrapperFields.calib_config.data=e}copyRefObject(e){this._refObject=new CalibConfigWrite_RequestRefStruct(e.toObject()),this._wrapperFields.calib_config.copyRefObject(this._refObject.calib_config)}copy(e){this._refObject=new CalibConfigWrite_RequestRefStruct(e._refObject.toObject()),this._wrapperFields.calib_config.copy(e._wrapperFields.calib_config)}static get classType(){return CalibConfigWrite_RequestWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"calib_config",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"string",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"realsense2_camera_msgs",type:"CalibConfigWrite_Request",stringUpperBound:null,isPrimitiveType:!1},msgName:"CalibConfigWrite_Request"}}hasMember(e){return-1!==["calib_config"].indexOf(e)}}class CalibConfigWrite_RequestArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof CalibConfigWrite_RequestWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new CalibConfigWrite_RequestWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to CalibConfigWrite_RequestArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to CalibConfigWrite_RequestArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new CalibConfigWrite_RequestRefArray(e),this._refObject=new CalibConfigWrite_RequestRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new CalibConfigWrite_RequestWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof CalibConfigWrite_RequestArrayWrapper))throw new TypeError('Invalid argument: should provide "CalibConfigWrite_RequestArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)CalibConfigWrite_RequestWrapper.freeStruct(r[t])}static get elementType(){return CalibConfigWrite_RequestWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return CalibConfigWrite_RequestArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=CalibConfigWrite_RequestWrapper;