"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StringWrapper=require("../../generated/std_msgs/std_msgs__msg__String.js"),PoseWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Pose.js"),LandmarkEntryRefStruct=StructType({id:primitiveTypes.string,tracking_from_landmark_transform:PoseWrapper.refObjectType,translation_weight:primitiveTypes.float64,rotation_weight:primitiveTypes.float64}),LandmarkEntryRefArray=ArrayType(LandmarkEntryRefStruct),LandmarkEntryRefStructArray=StructType({data:LandmarkEntryRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class LandmarkEntryWrapper{constructor(r){this._initialize(),this._setDefaults(),"object"==typeof r&&r._refObject?(this._refObject=new LandmarkEntryRefStruct(r._refObject.toObject()),this._wrapperFields.id=new StringWrapper(r._wrapperFields.id),this._wrapperFields.tracking_from_landmark_transform=new PoseWrapper(r._wrapperFields.tracking_from_landmark_transform)):void 0!==r&&translator.constructFromPlanObject(this,r),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new LandmarkEntryRefStruct,this._wrapperFields.id=new StringWrapper,this._wrapperFields.tracking_from_landmark_transform=new PoseWrapper}static createFromRefObject(r){let e=new LandmarkEntryWrapper;return e.copyRefObject(r),e}static createArray(){return new LandmarkEntryArrayWrapper}static get ArrayType(){return LandmarkEntryArrayWrapper}static get refObjectArrayType(){return LandmarkEntryRefStructArray}static get refObjectType(){return LandmarkEntryRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(r){r&&this._wrapperFields.id.freeze(r),this._refObject.id=this._wrapperFields.id.refObject,this._wrapperFields.tracking_from_landmark_transform.freeze(r),this._refObject.tracking_from_landmark_transform=this._wrapperFields.tracking_from_landmark_transform.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(r){this._wrapperFields.id.data=r.id.data,this._wrapperFields.tracking_from_landmark_transform.copyRefObject(r.tracking_from_landmark_transform),this._refObject.translation_weight=r.translation_weight,this._refObject.rotation_weight=r.rotation_weight}toPlainObject(r){return translator.toPlainObject(this,r)}static freeStruct(r){StringWrapper.freeStruct(r.id),PoseWrapper.freeStruct(r.tracking_from_landmark_transform)}static destoryRawROS(r){LandmarkEntryWrapper.freeStruct(r.refObject)}static type(){return{pkgName:"cartographer_ros_msgs",subFolder:"msg",interfaceName:"LandmarkEntry"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get id(){return this._wrapperFields.id.data}set id(r){this._wrapperFields.id.data=r}get tracking_from_landmark_transform(){return this._wrapperFields.tracking_from_landmark_transform}set tracking_from_landmark_transform(r){r instanceof PoseWrapper?this._wrapperFields.tracking_from_landmark_transform.copy(r):this._wrapperFields.tracking_from_landmark_transform.copy(new PoseWrapper(r))}get translation_weight(){return this._refObject.translation_weight}set translation_weight(r){this._refObject.translation_weight=r}get rotation_weight(){return this._refObject.rotation_weight}set rotation_weight(r){this._refObject.rotation_weight=r}copyRefObject(r){this._refObject=new LandmarkEntryRefStruct(r.toObject()),this._wrapperFields.id.copyRefObject(this._refObject.id),this._wrapperFields.tracking_from_landmark_transform.copyRefObject(this._refObject.tracking_from_landmark_transform)}copy(r){this._refObject=new LandmarkEntryRefStruct(r._refObject.toObject()),this._wrapperFields.id.copy(r._wrapperFields.id),this._wrapperFields.tracking_from_landmark_transform.copy(r._wrapperFields.tracking_from_landmark_transform)}static get classType(){return LandmarkEntryWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"id",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"string",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"tracking_from_landmark_transform",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Pose",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"translation_weight",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float64",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"rotation_weight",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float64",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"cartographer_ros_msgs",type:"LandmarkEntry",stringUpperBound:null,isPrimitiveType:!1},msgName:"LandmarkEntry"}}hasMember(r){return-1!==["id","tracking_from_landmark_transform","translation_weight","rotation_weight"].indexOf(r)}}class LandmarkEntryArrayWrapper{constructor(r=0){this._resize(r)}toRawROS(){return this._refObject.ref()}fill(r){const e=r.length;this._resize(e),r.forEach((r,e)=>{r instanceof LandmarkEntryWrapper?this._wrappers[e].copy(r):this._wrappers[e]=new LandmarkEntryWrapper(r)})}freeze(r){this._wrappers.forEach((e,t)=>{e.freeze(r),this._refArray[t]=e.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to LandmarkEntryArrayWrapper.size setter");return this._resize(r)}get capacity(){return this._wrappers.length}set capacity(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to LandmarkEntryArrayWrapper.capacity setter");return this._resize(r)}get refObject(){return this._refObject}_resize(r){if(r<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new LandmarkEntryRefArray(r),this._refObject=new LandmarkEntryRefStructArray,this._refObject.size=r,this._refObject.capacity=r,this._wrappers=new Array;for(let e=0;e<r;e++)this._wrappers.push(new LandmarkEntryWrapper)}copyRefObject(r){this._refObject=r;let e=this._refObject.data;e.length=this._refObject.size,this._resize(this._refObject.size);for(let r=0;r<this._refObject.size;r++)this._wrappers[r].copyRefObject(e[r])}copy(r){if(!(r instanceof LandmarkEntryArrayWrapper))throw new TypeError('Invalid argument: should provide "LandmarkEntryArrayWrapper".');this._resize(r.size),r._wrappers.forEach((r,e)=>{this._wrappers[e].copy(r)})}static freeArray(r){let e=r.data;e.length=r.size;for(let t=0;t<r.size;t++)LandmarkEntryWrapper.freeStruct(e[t])}static get elementType(){return LandmarkEntryWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return LandmarkEntryArrayWrapper}toPlainObject(r){return translator.toPlainObject(this,r)}}module.exports=LandmarkEntryWrapper;