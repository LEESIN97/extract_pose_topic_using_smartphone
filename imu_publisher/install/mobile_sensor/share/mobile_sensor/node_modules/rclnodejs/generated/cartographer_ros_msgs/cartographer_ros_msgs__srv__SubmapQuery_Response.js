"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StatusResponseWrapper=require("../../generated/cartographer_ros_msgs/cartographer_ros_msgs__msg__StatusResponse.js"),SubmapTextureWrapper=require("../../generated/cartographer_ros_msgs/cartographer_ros_msgs__msg__SubmapTexture.js"),SubmapQuery_ResponseRefStruct=StructType({status:StatusResponseWrapper.refObjectType,submap_version:primitiveTypes.int32,textures:SubmapTextureWrapper.refObjectArrayType}),SubmapQuery_ResponseRefArray=ArrayType(SubmapQuery_ResponseRefStruct),SubmapQuery_ResponseRefStructArray=StructType({data:SubmapQuery_ResponseRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class SubmapQuery_ResponseWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new SubmapQuery_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.status=new StatusResponseWrapper(e._wrapperFields.status),this._wrapperFields.textures=SubmapTextureWrapper.createArray(),this._wrapperFields.textures.copy(e._wrapperFields.textures)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new SubmapQuery_ResponseRefStruct,this._wrapperFields.status=new StatusResponseWrapper,this._wrapperFields.textures=SubmapTextureWrapper.createArray()}static createFromRefObject(e){let r=new SubmapQuery_ResponseWrapper;return r.copyRefObject(e),r}static createArray(){return new SubmapQuery_ResponseArrayWrapper}static get ArrayType(){return SubmapQuery_ResponseArrayWrapper}static get refObjectArrayType(){return SubmapQuery_ResponseRefStructArray}static get refObjectType(){return SubmapQuery_ResponseRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.status.freeze(e),this._refObject.status=this._wrapperFields.status.refObject,e&&this._wrapperFields.textures.fill([]),this._wrapperFields.textures.freeze(e),this._refObject.textures=this._wrapperFields.textures.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.status.copyRefObject(e.status),this._refObject.submap_version=e.submap_version,this._wrapperFields.textures.copyRefObject(e.textures)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){StatusResponseWrapper.freeStruct(e.status),0!=e.textures.size&&(SubmapTextureWrapper.ArrayType.freeArray(e.textures),SubmapTextureWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.textures,SubmapTextureWrapper.refObjectArrayType,"data"))}static destoryRawROS(e){SubmapQuery_ResponseWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"cartographer_ros_msgs",subFolder:"srv",interfaceName:"SubmapQuery_Response"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get status(){return this._wrapperFields.status}set status(e){e instanceof StatusResponseWrapper?this._wrapperFields.status.copy(e):this._wrapperFields.status.copy(new StatusResponseWrapper(e))}get submap_version(){return this._refObject.submap_version}set submap_version(e){this._refObject.submap_version=e}get textures(){return this._wrapperFields.textures}set textures(e){this._wrapperFields.textures.fill(e)}copyRefObject(e){this._refObject=new SubmapQuery_ResponseRefStruct(e.toObject()),this._wrapperFields.status.copyRefObject(this._refObject.status),this._wrapperFields.textures.copyRefObject(this._refObject.textures)}copy(e){this._refObject=new SubmapQuery_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.status.copy(e._wrapperFields.status),this._wrapperFields.textures.copy(e._wrapperFields.textures)}static get classType(){return SubmapQuery_ResponseWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"status",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"cartographer_ros_msgs",type:"StatusResponse",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"submap_version",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"int32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"textures",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"cartographer_ros_msgs",type:"SubmapTexture",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"cartographer_ros_msgs",type:"SubmapQuery_Response",stringUpperBound:null,isPrimitiveType:!1},msgName:"SubmapQuery_Response"}}hasMember(e){return-1!==["status","submap_version","textures"].indexOf(e)}}class SubmapQuery_ResponseArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof SubmapQuery_ResponseWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new SubmapQuery_ResponseWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SubmapQuery_ResponseArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SubmapQuery_ResponseArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new SubmapQuery_ResponseRefArray(e),this._refObject=new SubmapQuery_ResponseRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new SubmapQuery_ResponseWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof SubmapQuery_ResponseArrayWrapper))throw new TypeError('Invalid argument: should provide "SubmapQuery_ResponseArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)SubmapQuery_ResponseWrapper.freeStruct(r[t])}static get elementType(){return SubmapQuery_ResponseWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return SubmapQuery_ResponseArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=SubmapQuery_ResponseWrapper;