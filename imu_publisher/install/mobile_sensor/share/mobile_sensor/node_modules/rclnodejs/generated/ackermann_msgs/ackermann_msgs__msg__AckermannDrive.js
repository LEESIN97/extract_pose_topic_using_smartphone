"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),AckermannDriveRefStruct=StructType({steering_angle:primitiveTypes.float32,steering_angle_velocity:primitiveTypes.float32,speed:primitiveTypes.float32,acceleration:primitiveTypes.float32,jerk:primitiveTypes.float32}),AckermannDriveRefArray=ArrayType(AckermannDriveRefStruct),AckermannDriveRefStructArray=StructType({data:AckermannDriveRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class AckermannDriveWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?this._refObject=new AckermannDriveRefStruct(e._refObject.toObject()):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new AckermannDriveRefStruct}static createFromRefObject(e){let r=new AckermannDriveWrapper;return r.copyRefObject(e),r}static createArray(){return new AckermannDriveArrayWrapper}static get ArrayType(){return AckermannDriveArrayWrapper}static get refObjectArrayType(){return AckermannDriveRefStructArray}static get refObjectType(){return AckermannDriveRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject.steering_angle=e.steering_angle,this._refObject.steering_angle_velocity=e.steering_angle_velocity,this._refObject.speed=e.speed,this._refObject.acceleration=e.acceleration,this._refObject.jerk=e.jerk}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){AckermannDriveWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"ackermann_msgs",subFolder:"msg",interfaceName:"AckermannDrive"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get steering_angle(){return this._refObject.steering_angle}set steering_angle(e){this._refObject.steering_angle=e}get steering_angle_velocity(){return this._refObject.steering_angle_velocity}set steering_angle_velocity(e){this._refObject.steering_angle_velocity=e}get speed(){return this._refObject.speed}set speed(e){this._refObject.speed=e}get acceleration(){return this._refObject.acceleration}set acceleration(e){this._refObject.acceleration=e}get jerk(){return this._refObject.jerk}set jerk(e){this._refObject.jerk=e}copyRefObject(e){this._refObject=new AckermannDriveRefStruct(e.toObject())}copy(e){this._refObject=new AckermannDriveRefStruct(e._refObject.toObject())}static get classType(){return AckermannDriveWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"steering_angle",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"steering_angle_velocity",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"speed",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"acceleration",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"jerk",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"ackermann_msgs",type:"AckermannDrive",stringUpperBound:null,isPrimitiveType:!1},msgName:"AckermannDrive"}}hasMember(e){return-1!==["steering_angle","steering_angle_velocity","speed","acceleration","jerk"].indexOf(e)}}class AckermannDriveArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof AckermannDriveWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new AckermannDriveWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to AckermannDriveArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to AckermannDriveArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new AckermannDriveRefArray(e),this._refObject=new AckermannDriveRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new AckermannDriveWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof AckermannDriveArrayWrapper))throw new TypeError('Invalid argument: should provide "AckermannDriveArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)AckermannDriveWrapper.freeStruct(r[t])}static get elementType(){return AckermannDriveWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return AckermannDriveArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=AckermannDriveWrapper;