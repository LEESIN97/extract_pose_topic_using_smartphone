"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),ReadMetrics_RequestRefStruct=StructType({_dummy:primitiveTypes.bool}),ReadMetrics_RequestRefArray=ArrayType(ReadMetrics_RequestRefStruct),ReadMetrics_RequestRefStructArray=StructType({data:ReadMetrics_RequestRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class ReadMetrics_RequestWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?this._refObject=new ReadMetrics_RequestRefStruct(e._refObject.toObject()):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new ReadMetrics_RequestRefStruct}static createFromRefObject(e){let r=new ReadMetrics_RequestWrapper;return r.copyRefObject(e),r}static createArray(){return new ReadMetrics_RequestArrayWrapper}static get ArrayType(){return ReadMetrics_RequestArrayWrapper}static get refObjectArrayType(){return ReadMetrics_RequestRefStructArray}static get refObjectType(){return ReadMetrics_RequestRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject._dummy=e._dummy}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){ReadMetrics_RequestWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"cartographer_ros_msgs",subFolder:"srv",interfaceName:"ReadMetrics_Request"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get _dummy(){return this._refObject._dummy}set _dummy(e){this._refObject._dummy=e}copyRefObject(e){this._refObject=new ReadMetrics_RequestRefStruct(e.toObject())}copy(e){this._refObject=new ReadMetrics_RequestRefStruct(e._refObject.toObject())}static get classType(){return ReadMetrics_RequestWrapper}static get ROSMessageDef(){return{constants:[],fields:[],baseType:{pkgName:"cartographer_ros_msgs",type:"ReadMetrics_Request",stringUpperBound:null,isPrimitiveType:!1},msgName:"ReadMetrics_Request"}}hasMember(e){return-1!==["_dummy"].indexOf(e)}}class ReadMetrics_RequestArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach((e,r)=>{e instanceof ReadMetrics_RequestWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new ReadMetrics_RequestWrapper(e)})}freeze(e){this._wrappers.forEach((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject}),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ReadMetrics_RequestArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ReadMetrics_RequestArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new ReadMetrics_RequestRefArray(e),this._refObject=new ReadMetrics_RequestRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new ReadMetrics_RequestWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof ReadMetrics_RequestArrayWrapper))throw new TypeError('Invalid argument: should provide "ReadMetrics_RequestArrayWrapper".');this._resize(e.size),e._wrappers.forEach((e,r)=>{this._wrappers[r].copy(e)})}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)ReadMetrics_RequestWrapper.freeStruct(r[t])}static get elementType(){return ReadMetrics_RequestWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return ReadMetrics_RequestArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=ReadMetrics_RequestWrapper;